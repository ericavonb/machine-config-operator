// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	machineconfigurationopenshiftiov1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRenderedMachineConfigs implements RenderedMachineConfigInterface
type FakeRenderedMachineConfigs struct {
	Fake *FakeMachineconfigurationV1
}

var renderedmachineconfigsResource = schema.GroupVersionResource{Group: "machineconfiguration.openshift.io", Version: "v1", Resource: "renderedmachineconfigs"}

var renderedmachineconfigsKind = schema.GroupVersionKind{Group: "machineconfiguration.openshift.io", Version: "v1", Kind: "RenderedMachineConfig"}

// Get takes name of the renderedMachineConfig, and returns the corresponding renderedMachineConfig object, and an error if there is any.
func (c *FakeRenderedMachineConfigs) Get(name string, options v1.GetOptions) (result *machineconfigurationopenshiftiov1.RenderedMachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(renderedmachineconfigsResource, name), &machineconfigurationopenshiftiov1.RenderedMachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationopenshiftiov1.RenderedMachineConfig), err
}

// List takes label and field selectors, and returns the list of RenderedMachineConfigs that match those selectors.
func (c *FakeRenderedMachineConfigs) List(opts v1.ListOptions) (result *machineconfigurationopenshiftiov1.RenderedMachineConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(renderedmachineconfigsResource, renderedmachineconfigsKind, opts), &machineconfigurationopenshiftiov1.RenderedMachineConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &machineconfigurationopenshiftiov1.RenderedMachineConfigList{ListMeta: obj.(*machineconfigurationopenshiftiov1.RenderedMachineConfigList).ListMeta}
	for _, item := range obj.(*machineconfigurationopenshiftiov1.RenderedMachineConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested renderedMachineConfigs.
func (c *FakeRenderedMachineConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(renderedmachineconfigsResource, opts))
}

// Create takes the representation of a renderedMachineConfig and creates it.  Returns the server's representation of the renderedMachineConfig, and an error, if there is any.
func (c *FakeRenderedMachineConfigs) Create(renderedMachineConfig *machineconfigurationopenshiftiov1.RenderedMachineConfig) (result *machineconfigurationopenshiftiov1.RenderedMachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(renderedmachineconfigsResource, renderedMachineConfig), &machineconfigurationopenshiftiov1.RenderedMachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationopenshiftiov1.RenderedMachineConfig), err
}

// Update takes the representation of a renderedMachineConfig and updates it. Returns the server's representation of the renderedMachineConfig, and an error, if there is any.
func (c *FakeRenderedMachineConfigs) Update(renderedMachineConfig *machineconfigurationopenshiftiov1.RenderedMachineConfig) (result *machineconfigurationopenshiftiov1.RenderedMachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(renderedmachineconfigsResource, renderedMachineConfig), &machineconfigurationopenshiftiov1.RenderedMachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationopenshiftiov1.RenderedMachineConfig), err
}

// Delete takes name of the renderedMachineConfig and deletes it. Returns an error if one occurs.
func (c *FakeRenderedMachineConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(renderedmachineconfigsResource, name), &machineconfigurationopenshiftiov1.RenderedMachineConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRenderedMachineConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(renderedmachineconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &machineconfigurationopenshiftiov1.RenderedMachineConfigList{})
	return err
}

// Patch applies the patch and returns the patched renderedMachineConfig.
func (c *FakeRenderedMachineConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machineconfigurationopenshiftiov1.RenderedMachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(renderedmachineconfigsResource, name, pt, data, subresources...), &machineconfigurationopenshiftiov1.RenderedMachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationopenshiftiov1.RenderedMachineConfig), err
}
