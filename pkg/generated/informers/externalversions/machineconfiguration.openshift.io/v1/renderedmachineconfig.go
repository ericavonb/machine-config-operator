// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	time "time"

	machineconfigurationopenshiftiov1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
	versioned "github.com/openshift/machine-config-operator/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/openshift/machine-config-operator/pkg/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/machine-config-operator/pkg/generated/listers/machineconfiguration.openshift.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// RenderedMachineConfigInformer provides access to a shared informer and lister for
// RenderedMachineConfigs.
type RenderedMachineConfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.RenderedMachineConfigLister
}

type renderedMachineConfigInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewRenderedMachineConfigInformer constructs a new informer for RenderedMachineConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRenderedMachineConfigInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRenderedMachineConfigInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredRenderedMachineConfigInformer constructs a new informer for RenderedMachineConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRenderedMachineConfigInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MachineconfigurationV1().RenderedMachineConfigs().List(options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MachineconfigurationV1().RenderedMachineConfigs().Watch(options)
			},
		},
		&machineconfigurationopenshiftiov1.RenderedMachineConfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *renderedMachineConfigInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRenderedMachineConfigInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *renderedMachineConfigInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&machineconfigurationopenshiftiov1.RenderedMachineConfig{}, f.defaultInformer)
}

func (f *renderedMachineConfigInformer) Lister() v1.RenderedMachineConfigLister {
	return v1.NewRenderedMachineConfigLister(f.Informer().GetIndexer())
}
